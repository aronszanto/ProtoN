/*
 * proton.js
 * An implementation of the proton protocol in pure javascript
 * Nicholas Boucher & Aron Szanto
 * April 2018
 */

var proton = (function() {
  'use strict';

  // Opcodes defined within ProtoN protocol spec
  const opcodes = {
    PrimNull: 0,
    PrimString: 1,
    PrimInt: 2,
    PrimFloat: 3,
    PrimBool: 4,
    ConPair: 5,
    ConList: 6,
    ConObject: 7
  };

  // Use JS module syntax
  return {
    /*
     * Encodes the passed `obj` with the proton protocol and returns the
     * generated bytestring
     */
    encode: function(obj) {
      // Internal funciton which can be called recursively
      function _encode(obj, bytearr) {
        // Find the proton type of the passed variable
        if (obj === null || obj === undefined) {
          return "Null";
        } else if (typeof(obj) === 'string') {
          return "String";
        } else if (typeof(obj) === 'boolean') {
          return "Boolean";
        } else if (Number.isInteger(obj)) {
          return "Integer";
        } else if (typeof(obj) === 'number') {
          return "Float";
        } else if (Object.prototype.toString.call(obj) === '[object Array]') {
          return "List";
        } else if (obj === Object(obj)) {
          return "Object";
        }
        return "Error";
      }
      // Call the recursive function starting with an empty bytearray
      return _encode(obj, []);
    },

    /* Decodes the passed `bytestr` using the proton protocol and returns the
     * stored object
     */
    decode: function(bytestr) {
      var output = "";
      for (var i = 0; i < bytestr.length; i++) {
        output += input[i].charCodeAt(0).toString(2) + " ";
      }
      return {}
    }

  };
})();
