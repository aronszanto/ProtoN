/*
 * proton.js
 * An implementation of the proton protocol in pure javascript
 * Nicholas Boucher & Aron Szanto
 * April 2018
 */

'use strict';
 const opcodes = {
   PrimNull: 00,
   PrimString: 01,
   PrimInt: 02,
   PrimFloat: 03,
   PrimBool: 04,
   ConPair: 05,
   ConList: 06,
   ConObject: 07
 }

/*
 * Encodes the passed `obj` with the proton protocol and returns the
 * generated bytestring
 */
 function protonEncode(obj) {

   // Internal funciton which can be called recursively
   function _protonEncode(obj, bytearr) {
     // Find the proton type of the passed variable
     if (obj === null || obj === undefined) {
       return "Null";
     } else if (typeof(obj) === 'string') {
       return "String";
     } else if (typeof(obj) === 'boolean') {
       return "Boolean";
     } else if (Number.isInteger(obj)) {
       return "Integer";
     } else if (typeof(obj) === 'number') {
       return "Float";
     } else if (Object.prototype.toString.call(obj) === '[object Array]') {
       return "List";
     } else if (obj === Object(obj)) {
       return "Object";
     }
     return "Error";
   }

   // Call the recursive function starting with an empty bytearray
   return _protonEncode(obj, []);
 }

/* Decodes the passed `bytestr` using the proton protocol and returns the
 * stored object
 */
 function protonDecode(bytestr) {
   var output = "";
   for (var i = 0; i < bytestr.length; i++) {
      output += input[i].charCodeAt(0).toString(2) + " ";
  }
   return {}
 }
